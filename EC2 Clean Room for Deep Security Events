#! /usr/bin/env python3

"""
Function ingests Deep Security SNS events and extracts 'infected' or 'at-risk' EC2 instance IDs for investigation.
Script is fork from AWS EC2 Clean Room Forensics and Deep Security team's AWS Security Hub triage.
* Function runs as an AWS Lambda function triggers by an Amazon SNS topic
* Topic receives messages from Deep Security's Event Forwarding to Amazon SNS (ref: https://help.deepsecurity.trendmicro.com/sns.html?Highlight=sns)
* Each message should have one Deep Security event to evaluate but the code is robust enough to handle multiple events per message
* Script has been forked with AWS EC2 Clean Room Forensics automation to handle DS events instead of GuardDuty
"""
# Standard library
import datetime
import json
import os

import boto3

def evaluate_deep_security_event(deep_security_event):
	"""
	Evaluate the specified Deep Security event for security importance
	
	Does NOT work in Demo Mode --> No AWS EC2 instance data in logs (must have HostInstanceId)
	"""

	# Is this event related to an AWS instance?
	if 'HostInstanceID' in deep_security_event:

		if 'EventType' in deep_security_event:
			if deep_security_event['EventType'] == "SystemEvent": 
				# Ignore, generated by Deep Security as a platform. Includes events like agent updates, communication issues, etc.
				print("Skipping System Event")
			elif deep_security_event['EventType'] == "PacketLog": 
				# Firewall events
				if 'RepeatCount' in deep_security_event:
					print("Firewall event detected, checking repetition levels")
					if int(deep_security_event['RepeatCount']) >= 5:
						return True
			elif deep_security_event['EventType'] == "PayloadLog":
				# Intrusion prevention events
				if int(deep_security_event['Severity']) >= 3:
						return True
			elif deep_security_event['EventType'] == "AntiMalwareEvent":
				# Anti-malware events
				print("Malware event detected, checking the path of the infected file")
				if 'MalwareType' in deep_security_event:
					if len(deep_security_event['MalwareType']) > 0:
						return True
			elif deep_security_event['EventType'] == "IntegrityEvent":	
				# Integrity monitoring events
				if 'Severity' in deep_security_event:
					print("Integrity monitoring event detected, checking severity")
					if int(deep_security_event['Severity']) >= 3:
						return True
			elif deep_security_event['EventType'] == "LogInspectionEvent":	
				# Log inspection events
				if 'OSSEC_Level' in deep_security_event:
					print("Log inspection event detected, checking risk level")
					if int(deep_security_event['OSSEC_Level']) >= 8:
						return True

	return False


def verify_required_properties(deep_security_event):
	"""
	Verify if the specified Deep Security event contains the required properties to 
	be convert to an Amazon Finding Format finding
	"""
	result = False

	required_properties = [
		'HostOwnerID',
		'HostInstanceID',
		'TenantID',
		'EventID',
		'EventType',
		'LogDate',
		'HostAssetValue',
		'HostGroupID',
		'HostGroupName',
		'HostID',
		'Hostname',
		'HostSecurityPolicyID',
		'HostSecurityPolicyName',
		]

	for prop in required_properties:
		if prop in deep_security_event:
			result = True

	return result


def lambda_handler(event, context):
	total_events = 0
	forwarded_events = 0
	events_to_send = {}
	if 'Records' in event:
		
		for e in event['Records']:
			if 'EventSource' in e and e['EventSource'] == 'aws:sns':
				print("Amazon SNS message received")
				# This is an Amazon SNS message
				# 2. Extract the Deep Security event data
				if 'Sns' in e:
					deep_security_events = None
					try:
						deep_security_events = json.loads(e['Sns']['Message'])
						print("Extracted Deep Security event(s) from the SNS message")
					except Exception as err:
						print("Could not extract the Deep Security event(s) from the SNS message. Threw exception:\n{}".format(err))

					deep_security_events_list = []
					
					if deep_security_events:
						print("Found {} Deep Security events...processing".format(len(deep_security_events)))
						for deep_security_event in deep_security_events:
							total_events += 1
							if verify_required_properties(deep_security_event):
								forward_event = evaluate_deep_security_event(deep_security_event)
								
								if forward_event:
									deep_security_events_list.append(deep_security_event)
									forwarded_events += 1
								else:
									print("Security event does not meet the criteria for Lambda actions")
							else:
								print("Specified event does not have the required properties to properly process it")

					if len(deep_security_events_list) > 0:
						# Sort events by AWS account
						# Create dictionary for each account ID and append appropriate events to each
						for e in deep_security_events_list:
							if 'HostOwnerID' in e and not e['HostOwnerID'] in events_to_send:
								events_to_send[e['HostOwnerID']] = []
							# Add event to existing account ID
							events_to_send[e['HostOwnerID']].append(e)

	for acc, events in events_to_send.items():
		print("Account: {}\n".format(acc))
		for event in events:
			print("Instance ID: {}".format(event['HostInstanceID']))

	return {
		'events_returned': events_to_send,
	}
