########################################
# Written by: Daniel
# Created: 12/20/18
# Python 3.x
# Purpose: Alerts of any CloudWatch logs being deleted.
#           CloudTrail logs sent to S3 in JSON format
#           Convert to Python dictionary for parsing and triage
########################################

import boto3
import gzip
import json
import os

SNS_TOPIC = os.environ['SNS_TOPIC']
SNS_SUBJECT = 'CloudWatch Logs Deleted'
EVENT_SOURCE = 'logs.amazonaws.com'
EVENT_NAME = 'DeleteLogStream'
src_ip = ''
src_user = ''

s3_client = boto3.client('s3')
sns_client = boto3.client('sns')


def handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name']
        key = record['s3']['object']['key']

    
    # Fetch logs from S3
    s3_object = s3_client.get_object(
        Bucket=bucket,
        Key=key,
    )

    # Extract file and metadata from gzipped S3 object
    with gzip.open(s3_object['Body'], 'rb') as binaryObj:
        binaryContent = binaryObj.read()
    
    # Convert from binary data to text
    raw_logs = binaryContent.decode()
    
    # Change text into a dictionary
    dict_logs = json.loads(raw_logs)
    

    # Make sure 'Records'key exists
    if 'Records' in dict_logs.keys():
        for item in dict_logs['Records']:
            # Debugging commented out
            #for key, value in item.items():
            #    if isinstance(value, dict):
            #        print("Parent Key: {}".format(key))
            #        for k, v in value.items():
            #            print("Subdict Key: {}".format(k))
            #            print("Subdict Value: {}".format(v))
            #            continue
            #    else:
            #        print("Key: {}".format(key))
            #        print("Value: {}".format(value))
                
                
                
            if ('eventSource' in item):
                if (item['eventSource'] == EVENT_SOURCE):
                    if (item['eventName'] == EVENT_NAME):
                        if item['sourceIPAddress']:
                            src_ip = item['sourceIPAddress']
                        if item['userIdentity']['arn']:
                            src_user = item['userIdentity']['arn']
                        
                        alert_message = "Event: Logs were deleted from CloudWatch\nUser: " + src_user + "\nSource IP Address: " + src_ip
        
                        # Publish message to SNS topic
                        sns_response = sns_client.publish(
                            TopicArn=SNS_TOPIC,
                            Message=alert_message,
                            Subject=SNS_SUBJECT,
                            MessageStructure='string',
                        )
    else:
        exit()
